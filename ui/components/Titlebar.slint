
import { CatppuccinPallete } from "../style/CatppuccinPallete.slint";
component CircleIcon {
    in property <brush> background;
    in property <string> decoration-type: "close";
    out property <bool> hovered <=> touch.has-hover;

    property <length> size: 15px;
    animate size { duration: 100ms; easing: ease-in-out; }

    property <float> draw-opacity: 0;
    animate draw-opacity { duration: 100ms; easing: ease-in-out; }

    callback clicked <=> touch.clicked;

    states [
        hovered when root.hovered : {
            size: 18px;
            draw-opacity: 1;
        }
    ]

    touch := TouchArea {}
    
    Rectangle {
        width: root.size;
        height: root.size;
        border-radius: 10px;
        background: root.background;
    }
    // eaten from https://github.com/KDE/breeze/blob/master/kdecoration/breezebutton.cpp

    if root.decoration-type == "close" : 
        Path {
            opacity: root.draw-opacity;
            stroke: rgba(0, 0, 0, 0.4);
            stroke-width: 2px;
            x: 0.5px;
            y: 0.5px;

            MoveTo {
                x: 5;
                y: 5;
            }
            LineTo {
                x: 13;
                y: 13;
            }
            MoveTo {
                x: 13;
                y: 5;
            }
            LineTo {
                x: 5;
                y: 13;
            }
        }
    if root.decoration-type == "maximize" : 
        Path {
            opacity: root.draw-opacity;
            stroke: rgba(0, 0, 0, 0.4);
            stroke-width: 2px;
            y: -1px;
            MoveTo {
                x: 4;
                y: 11;
            }
            LineTo {
                x: 9;
                y: 6;
            }
            LineTo {
                x: 14;
                y: 11;
            }
        }
    if root.decoration-type == "minimize" :
        Path {
            opacity: root.draw-opacity;
            stroke: rgba(0, 0, 0, 0.4);
            stroke-width: 2px;
            y: 1px;
            MoveTo {
                x: 4;
                y: 7;
            }
            LineTo {
                x: 9;
                y: 12;
            }
            LineTo {
                x: 14;
                y: 7;
            }
        }

    
}



export component Titlebar {
    in-out property <string> title: "hello world";

    max-height: 30px;

    callback close <=> close-button.clicked;
    callback maximize <=> maximize-button.clicked;
    callback minimize <=> minimize-button.clicked;

    callback drag-start(length, length);
    callback drag-move(length, length);
    callback drag-end(length, length);

    rect := Rectangle {
        width: 100%;
        height: 100%;
        background: CatppuccinPallete.surface0;
    }
    touch := TouchArea {
        mouse-cursor: grab;
        moved() => {
            drag-move(touch.mouse-x, touch.mouse-y);
        }
        pointer-event(ev) => {
            if ev.button == PointerEventButton.left && ev.kind == PointerEventKind.down {
                drag-start(touch.mouse-x, touch.mouse-y);
                touch.mouse-cursor = MouseCursor.grabbing;
            }
            if ev.button == PointerEventButton.left && ev.kind == PointerEventKind.up {
                drag-end(touch.mouse-x, touch.mouse-y);
                touch.mouse-cursor = MouseCursor.grab;
            }
        }
        width: 90%;
    }
    HorizontalLayout {
        property <length> padding-lr: 10px;
        padding: 5px;
        padding-left: padding-lr;
        padding-right: padding-lr;

        alignment: space-between;

        HorizontalLayout {
            Text {
                text: root.title;
                font-size: 15px;
                color: CatppuccinPallete.header1;
            }
        }
        HorizontalLayout {
            min-width: 50px;
            spacing: 12px;

            maximize-button := CircleIcon {
                background: CatppuccinPallete.green;
                decoration-type: "maximize";
            }
            minimize-button := CircleIcon {
                background: CatppuccinPallete.yellow;
                decoration-type: "minimize";
            }
            close-button := CircleIcon {
                background: CatppuccinPallete.red;
                decoration-type: "close";
            }
        }
    }
}